Mirando ahora
 - https://www.youtube.com/watch?v=RCVNMRcefUk&list=PLw8RQJQ8K1ySN6bVHYEpDoh-CKVkL_uOF&index=27
 - https://www.youtube.com/watch?v=QV_6_aKH9G8
 - https://www.youtube.com/watch?v=7g1YmOXsCCU
 - https://www.youtube.com/watch?v=4fc-QRl8_QQ
 - https://www.youtube.com/watch?v=w_P3rE73Hk8

* Depurar Código (Debugging)
** (GCC) GNU Compiler Collection
   *GCC* se conoce como *GNU Compiler collection* que quiere decir *colección de compiladores*

*** Parámetros

    |-----------+------------------------------------------------------------------------|
    | Parametro | Descripción                                                            |
    |-----------+------------------------------------------------------------------------|
    | g         | El compilador incluye información sobre las variables (útil para GDB)  |
    |           |                                                                        |
    |-----------+------------------------------------------------------------------------|

*** Ejemplos

    #+NAME: Compilando codigo fuente C para depurarlo
    #+BEGIN_SRC shell
      # compilamos el codigo fuente unArchivo.c
      # creando un archivo ejecutable llamado miprograma
      gcc -g unArchivo.c -o miprograma

      # si queremos depurar el programa con el Depurador DDD
      # que tiene GUI (con interfáz gráfica)
      ddd miprograma

      # si queremos depurar el programa con el Depurador GDB
      # sin GUI (se utiliza la terminal de comandos)
      gdb miprograma
    #+END_SRC

*** Referencias
    + [[https://gcc.gnu.org/][Pagina Oficial - gcc.gnu.org]]
    + [[https://sourceware.org/gdb/onlinedocs/gdb/Variables.html][Program Variables - sourceware.org]]

** (GDB) GNU Debugger
*** Introducción
   + Este es el depurador estándar para el compilador GNU
   + Se utiliza mediante la terminal de comandos de linux
   + Se puede complementar con el depurador DDD que tiene interfaz gráfica
*** Comandos

    |-----------------------------+-------------------------------------|
    | Comando                     | Descripción                         |
    |-----------------------------+-------------------------------------|
    | gdb                         | Para iniciar el depurador           |
    | gcc -g archivo.c -o archivo | Para compilar programa para depurar |
    |                             |                                     |
    |-----------------------------+-------------------------------------|


    |----------------------------+---------------------------------------------------------------------------|
    | Comando                    | Descripción                                                               |
    |----------------------------+---------------------------------------------------------------------------|
    | file nombreArchivo         | Abrir otro programa a depurar                                             |
    | run                        | Ejecutar el programa de manera normal (si está en ejecución, lo reinicia) |
    | start                      | Ejecuta el paso a paso del programa desde el principio del código fuente  |
    | quit                       | Salir del programa                                                        |
    |----------------------------+---------------------------------------------------------------------------|
    | display unaVariable        | Muestra el valor de las variables cada vez que se ejecuta un comando      |
    | print unaVariable          | Imprime el valor de una variable                                          |
    | break                      | Para colocar un breakpoint (donde se detiene el debugger)                 |
    | watch unaVariable          | Para colocar un watchpoint (observar cambios en variables)                |
    | next                       | Avanza al siguiente paso                                                  |
    | continue                   | Continua la ejecución del programa y vuelve al Breakpoint                 |
    | step                       | (step into) Entrar en una función y avanzar al siguiente paso             |
    | list                       | Imprime lineas del programa                                               |
    | list n,m                   | Imprime rango de lineas (Ej. list 1,50)                                   |
    | list unaFuncion            | Imprime las lineas de una función específica                              |
    | set unaVariable=nuevoValor | Cambia el valor de una variable                                           |
    | info break                 | Imprime el listado de breakpoints y watchpoints agregados                 |
    | info local                 | Imprime las variables locales                                             |
    | delete numeroDelBreakpoint | Elimina el breakpoint con ese numero (con info se conoce el numero)       |
    |----------------------------+---------------------------------------------------------------------------|

    |---------------+-----------------|
    | Comando corto | Comando verboso |
    |---------------+-----------------|
    | r             | run             |
    | b             | break           |
    | w             | watch           |
    | l             | list            |
    | n             | next            |
    | s             | step            |
    | c             | continue        |
    |---------------+-----------------|

*** Colocar breakpoints condicionales
    Esto es interesante cuando queremos crear un breakpoint en un momento específico.

    #+BEGIN_EXAMPLE
    Un for que itera, y sólo queremos agregar el breakpoint cuando el contador es i=5
    para analizar el comportamiento
    #+END_EXAMPLE

    #+BEGIN_EXAMPLE
    Un while que se ejecuta hasta que no se cumpla su centinela, pero no sucede, 
    entonces evaluamos el centinela cuando tiene ese valor.
    #+END_EXAMPLE
    
    #+NAME: Ejemplos con breakpoint condicional
    #+BEGIN_SRC sh 
      # suponiendo que queremos agregar un breakpoint en una función llamada unaFuncion
      # cuando la variable i equivale a 5
      (gdb) break unaFuncion if(i==5)

      # agrega un breakpoint en la linea 5 de esa función
      # cuenta el número de linea dentro del bloque
      (gdb) break unaFuncion:5 if(nombre=='carlos')

      # agrega un breakpoint en la variable centinela
      # cuando este equivale a -1
      (gdb) break centinela if(centinela==-1)

      # otras variantes
      (gdb) break centinela if(contador>5)
      (gdb) break otraFuncion if(nombreIngresado=='pepe')
      (gdb) break unaVariable if(otraVariable==2)
    #+END_SRC

*** Comparar el cambio valor de una o varias Variables
    + Para esto utilizamos el comando *watch* que agrega *watchpoint*
    + Nos muestra el valor anterior antes que cambie, y el nuevo.

    #+BEGIN_EXAMPLE
    Si hay operaciones aritméticas y quizás el resultado no es correcto porque su valor anterior daba mal,
    ó para visualizar si se están asignando bien los valores a las variables
    #+END_EXAMPLE

    #+NAME: Usando los comandos watch y display de GDB
    #+BEGIN_SRC sh
      # compilamos el codigo fuente
      gcc -g miArchivo.c -o miArchivo
      # depuramos el archivo ejecutable con GDB
      gdb miArchivo

      # estando dentro
      (gdb) break main
      (gdb) run
      (gdb) display sumar
      (gdb) display restar
      (gdb) watch x
      (gdb) watch y
      (gdb) next
      # y.. 
    #+END_SRC

    #+NAME: Ejemplo para usar watchpoint
    #+BEGIN_SRC C
      #include <stdio.h>

      int main(void){
        int x,y,z;

        int sumar, restar, multiplicar;

        // al no estar inicializadas las variables x,y
        // va a estar sumando valores al azar (se les dice valor basura)
        // al depurar por ejemplo podriamos usar el comando watch y display en esas variables
        // para ver que valores van tomando, y si es el comportamiento deseado o no
        for(int i=0; i < 5; i++){
          sumar = x+y;
          restar = x-y;
          multiplicar = x*y;
        }

        z = sumar+restar+multiplicar;

        return 0;
      }
    #+END_SRC

*** Ver el valor de distintas variables al mismo tiempo
    + Con el comando *display* podemos generando una lista de que variables queremos ver
    + Se visualizan cada vez que se ejecute un comando

    #+BEGIN_COMMENT
    Si queremos ver el estado de varias variables al mismo tiempo, como puede ser
    los datos nombre, edad que se van ingresando.
    Ó si queremos comparar entre distintos resultados de operaciones guardadas en distintas variables.
    #+END_COMMENT

*** Colocar breakpoint en un número de linea
   
    #+NAME: Breakpoint en un numero de linea
    #+BEGIN_SRC sh
      # compilamos el archivo de esta manera para depurar
      gcc -g unArchivo.c -o unArchivo

      # iniciamos el GNU Debugger (GDB)
      gdb unArchivo

      # cargamos otro archivo a depurar
      file otroArchivo

      # agregamos un breakpoint en la linea 15 del archivo actual
      # (en una linea del archivo actual)
      break 15

      # agregamos un breakpoint en la linea 11 del archivo unArchivo.c
      # (si usamos esta notación hay que poner la extensión)
      break unArchivo.c:11

      # agregamos otro breakpoint en la función suma
      # (en una función)
      break suma

      # agregamos otro breakpoint en la función principal main
      # (en una función)
      break main
    #+END_SRC

*** Problemas frecuentes

    #+NAME: Problemas con el Contexto al imprimir o vigilar variables
    #+BEGIN_SRC shell
      # Si al intentar imprimir o vigilar una variable
      # y nos muestra "No symbol in current context"
      # es porque no le estamos dando suficiente contexto para
      # acceder a esas variables.

      (gdb) print i
      No symbol "i" in current context.

      (gdb) watch sum
      No symbol "sum" in current context.
    #+END_SRC
   
    #+NAME: Solución al problema por Contexto de variables
    #+BEGIN_SRC shell
      # Posible solución, suponiendo que es un programa básico

      # colocar un Breakpoint en el main, y volver a intentar
      # (de esa manera le estamos dando un contexto, es decir
      # en donde se encuentran)

      # 1. colocamos un Breakpoint en el main
      # (que es donde tenemos las variables, son locales dentro del main)
      (gdb) break main

      # 2. ejecutamos el programa
      (gdb) run

      # 3. ahora tiene un contexto de donde se encuentran las variables
      # (osea dentro del main, son variables locales del main)
      (gdb) watch i
      Hardware watchpoint 2: i

      (gdb) print i
      $1 = 0
    #+END_SRC

*** Referencias
    + [[https://servicios.algoritmos7540mendez.com.ar/apuntes/08_-_debugging.pdf][Debugging - Dr Mariano Mendez (UBA)]]
    + [[https://www.cs.swarthmore.edu/~newhall/unixhelp/howto_gdb.php][Guide GDB and DDD - Swarthmore College]]
    + [[https://lihuen.linti.unlp.edu.ar/index.php/C%C3%B3mo_usar_GDB][Cómo usar GDB - Lihuen - UNPL]]
    + [[http://www.lsi.us.es/~javierj/ssoo_ficheros/GuiaGDB.htm][Primeros pasos con GDB	- jjrodriguez]]
    + [[https://www.ibm.com/developerworks/systems/library/es-debug/index.html][Debugging tools and techniques for Linux - IBM]]
    + [[https://www.tecmint.com/debug-source-code-in-linux-using-gdb/][Debug source code in linux using GDB - Tecmint.com]]
    + [[https://www.classes.cs.uchicago.edu/archive/2017/winter/51081-1/LabFAQ/lab2/gdb.html][Debugging C and C++ using GDB - Classes UChicago]]
    + [[https://www.bennetyee.org/ucsd-pages/Courses/cse127.w02/gdbtutorial.html][GDB Tutorial - bennetye.org]]
    + [[https://beej.us/guide/bggdb/][Quick guide to GDB - Beej.us]]
    + [[https://sourceware.org/gdb/onlinedocs/gdb/Set-Watchpoints.html][Setting Watchpoints - Sourceware.org]]

*** Videos
    + [[https://www.youtube.com/watch?v=xQ0ONbt-qPs][Quick Intro to GDB]]
    + [[https://www.youtube.com/watch?v=sCtY--xRUyI][Introduction to GDB - Hardvard CS50]]
    + [[https://www.youtube.com/watch?v=Vn1kDWVxq4s][Debugging with GDB in Emacs]]

** (DDD) Data Display Debugger
*** Introducción
    + 
*** Referencias
    + [[https://www.gnu.org/software/ddd/][What is DDD? - gnu.org]]
    + [[http://www.linuxfocus.org/Castellano/January1998/article20.html][Depurando código con ddd - linuxfocus.org]]

** Depurador Nemiver
*** Ejemplos

    #+NAME: Depurando Programa C con Nemiver
    #+BEGIN_SRC sh 
      # - compilamos el codigo fuente probando1.c
      # - creando el archivo ejecutable llamado probando1
      # - se recomienda usar el parámetro -g para no tener problemas con el depurador
      gcc -g probando1.c -o probando1

      # depuramos el archivo ejecutable probando1 con nemiver
      nemiver probando1
    #+END_SRC

*** Referencias
   + [[http://personals.ac.upc.edu/guerrero/fo2015/Trucos_Nemiver_Mario_New.pdf][Depurar programas con Nemiver - Mario Macias]] 
   + https://developer.gnome.org/nemiver/0.9/nemiver.html

** Depurador GDBGUI 
*** Instalación y Configuración

    #+BEGIN_SRC shell
      # instalamos el paquete gdbgui
      # con el gestor de paquetes "pip" de python
      pip install gdbgui --upgrade

      # ejecutamos el depurador gdbgui
      # se iniciará un servidor web, para acceder desde un navegador web
      # http://localhost:5000
      gdbgui
    #+END_SRC
   
*** Referencias
    + [[https://pypi.org/project/gdbgui/0.9.1.1/][Repositorio Oficial, Manual, Ejemplos - pypi.org]]
    + [[https://www.tecmint.com/install-pip-in-linux/][How to install PIP to Manage Python packages - tecmint.com]]
    + [[https://pip.pypa.io/en/stable/installing/][Do I need to install pip? - PyPA]]
** Cosas

  #+BEGIN_SRC sh
    # para debugear C desde la terminal

    sudo pacman -S gdb
    # para debugear C/C++ con entorno grafico
    sudo pacman -S nemiver

    # parece que está mas enfocado para php
    sudo pacman -S xdebug
  #+END_SRC

  Otras a revisar
  - https://undo.io/resources/gdb-watchpoint/gdb-wizardry/
  - https://linoxide.com/linux-how-to/user-space-debugging-tools-linux/
https://www.youtube.com/watch?v=J7L2x1ATOgk
** Referencias
  *Referencias*
  + [[https://www.tecmint.com/debug-source-code-in-linux-using-gdb/][debug source code in linux using gdb]]
  + [[https://www.cs.yale.edu/homes/aspnes/pinewiki/C(2f)Debugging.html][C/Debugging - cs.yale.edu]]
  + [[https://wiki.archlinux.org/index.php/Debugging][Debugging - wiki.archlinux.org]]
  + [[https://www.linuxlinks.com/debuggers/][Linux Debuggers]]
  + [[https://www.ubuntupit.com/best-linux-debuggers-for-modern-software-engineers/#9-bugzilla][Best linux debuggers]]
  + [[https://www.onlinegdb.com/online_c_debugger][Onlinegdb.com]]
  + [[https://www.youtube.com/watch?v=bWH-nL7v5F4][Video - Debugging - GDB TUtorial]]

COn emacs
https://www.cs.odu.edu/~zeil/cs252/latest/Public/debugging/index.html

* Programar y Depurar en C
** Comandos útiles en Emacs con GDB

   |----------------------+-------------------------------------------------------------|
   | Comando              | Descripción                                                 |
   |----------------------+-------------------------------------------------------------|
   | M-x gdb              | Para iniciar el modo depuración con GDB en el buffer actual |
   | M-x gdb-many-windows | Abre los buffers necesarios de GDB                          |
   |----------------------+-------------------------------------------------------------|
** Referencias
   + https://www.programiz.com/c-programming/c-input-output
   + https://fresh2refresh.com/c-programming/c-printf-and-scanf/
   + https://www.geeksforgeeks.org/use-fflushstdin-c/
   + [[https://sourceware.org/gdb/onlinedocs/gdb/Emacs.html][Using GDB under GNU Emacs - sourceware.org]]
** Videos
   + [[https://www.youtube.com/watch?v=bRAthoxbVyA&list=PLw8RQJQ8K1ySN6bVHYEpDoh-CKVkL_uOF&index=19][Playlist - Empieza a Programar en C]]
   + [[https://www.youtube.com/playlist?list=PLTd5ehIj0goOAWdpCpghXiRCmEOrJJLEW][Playlist - Curso de C - Makigas.es]]
   + [[https://www.youtube.com/playlist?list=PLTd5ehIj0goMZ33qJ7JmuXjSO8RoefiZS][Playlist - Desarrollando en C - Makigas.es]]
   + [[https://www.youtube.com/watch?v=9ijhlPfxFnk&list=PLMDLYpoZkTxNARxzB3-FcqcXoEOExyxe7][Playlist - Curso de C desde Cero - Codeando]]
   + [[https://www.youtube.com/watch?v=YJgnqMCg0-Y&list=PLs1sXiNvW4OyBpsI1gcEG6yQJlRPx5hhC][Programacion en C - Codigo Compilado]]
* Desarrollar Videojuegos en C++
** Referencias
   + [[https://www.youtube.com/watch?v=7YBzHJJYpZo&list=PLmxqg54iaXrhTqZxylLPo0nov0OoyJqiS][Playlist - Programación de Videojuegos en C++ - Prof. Retroman]]
   + [[https://www.youtube.com/playlist?list=PLEtcGQaT56cgt9IcNjn86O-zI3aZmv5Oo][Aprender C++ con Unreal Engine - Jesus Conde]]
* Desarrollar videojuegos en Ensamblador
** Referencias
   + [[https://www.youtube.com/watch?v=6Z8pWxTbF0g&list=PLmxqg54iaXrgXYrAo_s4d7z1X13jooFTk&index=1][Playlist - Programación de Videojuegos Ensamblador Z80 - Prof. Retroman]]
   + [[https://www.youtube.com/watch?v=5aGiwhEVKMA][Video - Dinousaurio de Chrome]]
   + [[https://www.youtube.com/watch?v=h9KqifgNpwY][Video - Como graficar un circulo en assembler]]

