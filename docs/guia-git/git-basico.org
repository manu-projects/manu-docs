#+TITLE:     Guia Git Básico
#+SETUPFILE: ../theme-readtheorg.setup
#+EXPORT_FILE_NAME: ../../views/guia-git/git-basico.html

#+ATTR_HTML: :width 650
[[../../assets/img/programming-software.jpg]]

* Básico
** Agregar todos los cambios nuevos
   Si hicimos cambios en varios archivos y directorios, y no queremos agregar cambio por cambio
   podemos pasarle por parámetro un punto, que indica el directorio que estas posicionado. 
   La idea seria ubicarse en la raíz o directorio principal para lanzar el comando.

   #+NAME: git-agregar
   #+BEGIN_SRC bash
     git add .
   #+END_SRC
** Deshacer cambios
*** Conceptos
     Se puede revertir los cambios de un archivo, o de todos los archivos que se cambiaron
     de forma temporal o permanente.
*** Deshacer cambios locales
    Si modificaste un archivo, y por alguna razón no podemos usar el shortcut ~Ctrl+z~
    para volver atras porque se nos cerró el editor, ó reinició el ordenador.
    Podemos volver los cambios del archivo antes de esa modificación
    haciendo uso del comando **checkout** seguido de dos guiones y del nombre de archivo.

    #+NAME: deshacer-cambios-locales
    #+BEGIN_SRC shell
      git checkout -- archivo.html
    #+END_SRC

    *Observación:*
    Un cambio es local, cuando modificas archivos con tu editor de texto, y guardás los cambios.
*** Deshacer cambios de un archivo del stage
    Si modificaste un archivo, lo guardaste y lo agregaste al repositorio local con ~git add~
    aún se pueden deshacer los cambios. Necesitarás usar primero el ~reset head~ para decirle
    a git que no quieres el último cambio, y luego proceder como antes con **checkout** para deshacer el cambio guardado.

    #+NAME: deshacer-cambios-area-stage
    #+BEGIN_SRC shell
      git reset HEAD archivo.html
    #+END_SRC

    *Observación:*
    Un cambio está en stage, si utilizaste el comando ~git add~
*** Deshacer cambios con "reset" sin borrar historial (stage)
    Una solución a "no borrar los commits del historial" que es posible que a veces
    lo hagamos de forma intencional por pequeños cambios es pasar el parámetro ~soft~.

    Con este parámetro ~soft~ los cambios de los commits apareceran en el *stage*,
    caso contrario a que si usamos *hard*. Con este segundo se debe tener cuidado,
    porque apuntará al commit indicado y los anteriores a él se borrarán del stage,
    no pudiendo ver diferencias o hacer checkout de ellos.

    #+NAME: deshacer-cambios-area-stage2
    #+BEGIN_SRC shell
      git reset --soft 6148578
    #+END_SRC

    *Observación:*
    El hash de un commit se puede obtener utilizando ~git log --oneline~ aparece a la izquierda de mensaje
** Revertir todos los cambios de forma temporal
   Con el comando ~stash~ en realidad movemos los cambios a otro lugar como si
   lo escondieramos. Si mientras realizabamos cambios(A), y de repente nos 
   piden cambios(B), ocultamos los cambios(A) con ~stash~. Hacemos los cambios(B)

   #+NAME: git-revertir-cambios
   #+BEGIN_SRC shell
     git stash
     git revert
   #+END_SRC
** Ver un resumen de los commits
   #+NAME: git-historial
   #+BEGIN_SRC shell
     git log --oneline
   #+END_SRC
* Branches
** Crear un branch
   Los branches nos permiten crear nuevas funcionalidades o modificaciones del proyecto
   sin modificar de forma directa en él. Por tanto podemos crear un branch para trabajar
   sobre esta nueva mejora lanzar commits y push al repositorio por más que aún esté en
   desarrollo lo que realizamos.

   #+NAME: git-crear-branch
   #+BEGIN_SRC shell
     git branch nombre-del-Branch
   #+END_SRC
** Crear un branch y cambiar al nuevo branch
   Cuando creamos un branch, suele quedarse posicionado en el *master*, de esta manera
   podemos crear el branch y ya trabajar sobre él.

   #+NAME: git-crear-cambiar-rama
   #+BEGIN_SRC shell
     git checkout -b nombre-del-branch
   #+END_SRC
** Modificar el nombre de un branch
   #+NAME: git-modificar-rama
   #+BEGIN_SRC shell
     git branch -m nombre-del-branch nuevo-nombre-del-branch
   #+END_SRC
** Borrar branch local
   #+NAME: git-borrar-rama
   #+BEGIN_SRC shell
     git branch -d nombre-del-branch
   #+END_SRC
** Listar branches creados
   #+NAME: git-listar-ramas
   #+BEGIN_SRC shell
     git branch
   #+END_SRC
** Cambiarse a un branch
   #+NAME: git-cambiar-rama
   #+BEGIN_SRC shell
     git checkout nombre-del-branch
   #+END_SRC
* Tags ó Etiquetas
  Sirven para tener un control de versiones del proyecto. Existen dos tipos "ligeros" 
  y "anotados", los segundos son los más recomendados en caso de querer tener más información.

** Crear tag
   #+NAME: git-crear-etiqueta
   #+BEGIN_SRC shell
     git tag -a v1.0 -m "Proyecto v1.0.0"
   #+END_SRC
** Listar tags
   #+NAME: git-listar-etiquetas
   #+BEGIN_SRC shell
     git tag
   #+END_SRC
** Eliminar tag
   #+NAME: git-eliminar-etiqueta
   #+BEGIN_SRC shell
     git tag -d v1.0
   #+END_SRC
* Stash
  Para esconder cambios utilizamos el comando ~stash~

** Listar cambios ocultos
   #+NAME: git-listar-cambios-ocultos
   #+BEGIN_SRC shell
     git stash list
   #+END_SRC
** Aplicar el ultimo cambio
   #+NAME: git-aplicar-stash
   #+BEGIN_SRC shell
     git stash apply
   #+END_SRC
** Guardar un stash mas descriptivo
   #+NAME: git-detallar-stash
   #+BEGIN_SRC shell
     git stash save "Se ha realizado cambios en la letra fuente"
   #+END_SRC
** Mostrar informacion de un stash
   #+NAME: git-mostrar-stash
   #+BEGIN_SRC shell
     git stash show
   #+END_SRC
** Remover de la pila del stash
   #+NAME: git-eliminar-stash
   #+BEGIN_SRC shell
     git stash drop
   #+END_SRC
* Referencias
** Referencias Web Extraoficiales
   1. [[https://dev.to/neshaz/when-to-use-git-reset-git-revert--git-checkout-18je][Como deshacer cambios - dev.to]]
   2. [[https://nathanhoad.net/how-to-colours-in-git/][Agregar color a la terminal de GIT - Nathanhoad.net]]
   3. [[https://www.leaseweb.com/labs/2013/08/git-tip-beautiful-colored-and-readable-output/][Agregar color a la terminal de GIT - Leaseweb.com]]
   4. [[https://pvigier.github.io/2019/05/06/commit-graph-drawing-algorithms.html][Interpretación gráfica del comando commit - Github, Pvigier]]
   5. [[https://medium.com/datadriveninvestor/git-rebase-vs-merge-cc5199edd77c][Diferencias entre los comandos rebase y merge - Blog DataDrivenInvestor]]
   6. [[https://www.bitsnbites.eu/a-tidy-linear-git-history/][Interpretación gráfica del historial - Bitsnbites.eu]]
   7. [[https://www.slideshare.net/th507/git-an-intro-of-plumbing-and-porcelain-commands][Tutorial de Git - By Jingwei, John Liu]]
   8. [[https://jeffsaracco.com/Happy-git-Trees/][Interpretación gráfica del historial y comandos - Jeffsaracco.com]]
** Referencias Youtube
   1. [[https://www.youtube.com/watch?v=r-PTFYVmGNo][Comandos fetch, pull y rebase]]
